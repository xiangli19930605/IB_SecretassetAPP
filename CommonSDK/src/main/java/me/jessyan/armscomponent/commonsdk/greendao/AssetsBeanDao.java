package me.jessyan.armscomponent.commonsdk.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import me.jessyan.armscomponent.commonsdk.bean.Historyrecord.AssetsBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "ASSETS_BEAN".
*/
public class AssetsBeanDao extends AbstractDao<AssetsBean, Long> {

    public static final String TABLENAME = "ASSETS_BEAN";

    /**
     * Properties of entity AssetsBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Uid = new Property(0, Long.class, "uid", true, "_id");
        public final static Property AssetIncId = new Property(1, Long.class, "assetIncId", false, "ASSET_INC_ID");
        public final static Property RfidId = new Property(2, String.class, "rfidId", false, "RFID_ID");
        public final static Property Taskid = new Property(3, String.class, "taskid", false, "TASKID");
        public final static Property TagType = new Property(4, int.class, "tagType", false, "TAG_TYPE");
        public final static Property AssetUser = new Property(5, String.class, "assetUser", false, "ASSET_USER");
        public final static Property BelongDept = new Property(6, String.class, "belongDept", false, "BELONG_DEPT");
        public final static Property LastApproveUser = new Property(7, String.class, "lastApproveUser", false, "LAST_APPROVE_USER");
        public final static Property Id = new Property(8, String.class, "id", false, "ID");
        public final static Property OutBillId = new Property(9, String.class, "outBillId", false, "OUT_BILL_ID");
        public final static Property AssetId = new Property(10, String.class, "assetId", false, "ASSET_ID");
        public final static Property EndTime = new Property(11, String.class, "endTime", false, "END_TIME");
        public final static Property AssetName = new Property(12, String.class, "assetName", false, "ASSET_NAME");
        public final static Property TypeId = new Property(13, String.class, "typeId", false, "TYPE_ID");
        public final static Property AssetBrand = new Property(14, String.class, "assetBrand", false, "ASSET_BRAND");
        public final static Property AssetModel = new Property(15, String.class, "assetModel", false, "ASSET_MODEL");
        public final static Property PermissionState = new Property(16, int.class, "permissionState", false, "PERMISSION_STATE");
        public final static Property AssetState = new Property(17, int.class, "assetState", false, "ASSET_STATE");
    }


    public AssetsBeanDao(DaoConfig config) {
        super(config);
    }
    
    public AssetsBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"ASSETS_BEAN\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: uid
                "\"ASSET_INC_ID\" INTEGER," + // 1: assetIncId
                "\"RFID_ID\" TEXT," + // 2: rfidId
                "\"TASKID\" TEXT," + // 3: taskid
                "\"TAG_TYPE\" INTEGER NOT NULL ," + // 4: tagType
                "\"ASSET_USER\" TEXT," + // 5: assetUser
                "\"BELONG_DEPT\" TEXT," + // 6: belongDept
                "\"LAST_APPROVE_USER\" TEXT," + // 7: lastApproveUser
                "\"ID\" TEXT," + // 8: id
                "\"OUT_BILL_ID\" TEXT," + // 9: outBillId
                "\"ASSET_ID\" TEXT," + // 10: assetId
                "\"END_TIME\" TEXT," + // 11: endTime
                "\"ASSET_NAME\" TEXT," + // 12: assetName
                "\"TYPE_ID\" TEXT," + // 13: typeId
                "\"ASSET_BRAND\" TEXT," + // 14: assetBrand
                "\"ASSET_MODEL\" TEXT," + // 15: assetModel
                "\"PERMISSION_STATE\" INTEGER NOT NULL ," + // 16: permissionState
                "\"ASSET_STATE\" INTEGER NOT NULL );"); // 17: assetState
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"ASSETS_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, AssetsBean entity) {
        stmt.clearBindings();
 
        Long uid = entity.getUid();
        if (uid != null) {
            stmt.bindLong(1, uid);
        }
 
        Long assetIncId = entity.getAssetIncId();
        if (assetIncId != null) {
            stmt.bindLong(2, assetIncId);
        }
 
        String rfidId = entity.getRfidId();
        if (rfidId != null) {
            stmt.bindString(3, rfidId);
        }
 
        String taskid = entity.getTaskid();
        if (taskid != null) {
            stmt.bindString(4, taskid);
        }
        stmt.bindLong(5, entity.getTagType());
 
        String assetUser = entity.getAssetUser();
        if (assetUser != null) {
            stmt.bindString(6, assetUser);
        }
 
        String belongDept = entity.getBelongDept();
        if (belongDept != null) {
            stmt.bindString(7, belongDept);
        }
 
        String lastApproveUser = entity.getLastApproveUser();
        if (lastApproveUser != null) {
            stmt.bindString(8, lastApproveUser);
        }
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(9, id);
        }
 
        String outBillId = entity.getOutBillId();
        if (outBillId != null) {
            stmt.bindString(10, outBillId);
        }
 
        String assetId = entity.getAssetId();
        if (assetId != null) {
            stmt.bindString(11, assetId);
        }
 
        String endTime = entity.getEndTime();
        if (endTime != null) {
            stmt.bindString(12, endTime);
        }
 
        String assetName = entity.getAssetName();
        if (assetName != null) {
            stmt.bindString(13, assetName);
        }
 
        String typeId = entity.getTypeId();
        if (typeId != null) {
            stmt.bindString(14, typeId);
        }
 
        String assetBrand = entity.getAssetBrand();
        if (assetBrand != null) {
            stmt.bindString(15, assetBrand);
        }
 
        String assetModel = entity.getAssetModel();
        if (assetModel != null) {
            stmt.bindString(16, assetModel);
        }
        stmt.bindLong(17, entity.getPermissionState());
        stmt.bindLong(18, entity.getAssetState());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, AssetsBean entity) {
        stmt.clearBindings();
 
        Long uid = entity.getUid();
        if (uid != null) {
            stmt.bindLong(1, uid);
        }
 
        Long assetIncId = entity.getAssetIncId();
        if (assetIncId != null) {
            stmt.bindLong(2, assetIncId);
        }
 
        String rfidId = entity.getRfidId();
        if (rfidId != null) {
            stmt.bindString(3, rfidId);
        }
 
        String taskid = entity.getTaskid();
        if (taskid != null) {
            stmt.bindString(4, taskid);
        }
        stmt.bindLong(5, entity.getTagType());
 
        String assetUser = entity.getAssetUser();
        if (assetUser != null) {
            stmt.bindString(6, assetUser);
        }
 
        String belongDept = entity.getBelongDept();
        if (belongDept != null) {
            stmt.bindString(7, belongDept);
        }
 
        String lastApproveUser = entity.getLastApproveUser();
        if (lastApproveUser != null) {
            stmt.bindString(8, lastApproveUser);
        }
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(9, id);
        }
 
        String outBillId = entity.getOutBillId();
        if (outBillId != null) {
            stmt.bindString(10, outBillId);
        }
 
        String assetId = entity.getAssetId();
        if (assetId != null) {
            stmt.bindString(11, assetId);
        }
 
        String endTime = entity.getEndTime();
        if (endTime != null) {
            stmt.bindString(12, endTime);
        }
 
        String assetName = entity.getAssetName();
        if (assetName != null) {
            stmt.bindString(13, assetName);
        }
 
        String typeId = entity.getTypeId();
        if (typeId != null) {
            stmt.bindString(14, typeId);
        }
 
        String assetBrand = entity.getAssetBrand();
        if (assetBrand != null) {
            stmt.bindString(15, assetBrand);
        }
 
        String assetModel = entity.getAssetModel();
        if (assetModel != null) {
            stmt.bindString(16, assetModel);
        }
        stmt.bindLong(17, entity.getPermissionState());
        stmt.bindLong(18, entity.getAssetState());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public AssetsBean readEntity(Cursor cursor, int offset) {
        AssetsBean entity = new AssetsBean( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // uid
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // assetIncId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // rfidId
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // taskid
            cursor.getInt(offset + 4), // tagType
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // assetUser
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // belongDept
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // lastApproveUser
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // id
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // outBillId
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // assetId
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // endTime
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // assetName
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // typeId
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // assetBrand
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // assetModel
            cursor.getInt(offset + 16), // permissionState
            cursor.getInt(offset + 17) // assetState
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, AssetsBean entity, int offset) {
        entity.setUid(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setAssetIncId(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setRfidId(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setTaskid(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setTagType(cursor.getInt(offset + 4));
        entity.setAssetUser(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setBelongDept(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setLastApproveUser(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setId(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setOutBillId(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setAssetId(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setEndTime(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setAssetName(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setTypeId(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setAssetBrand(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setAssetModel(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setPermissionState(cursor.getInt(offset + 16));
        entity.setAssetState(cursor.getInt(offset + 17));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(AssetsBean entity, long rowId) {
        entity.setUid(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(AssetsBean entity) {
        if(entity != null) {
            return entity.getUid();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(AssetsBean entity) {
        return entity.getUid() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
